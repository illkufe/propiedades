# activos/urls.py

url(r'^medidores/list$', views.MedidorList.as_view(), name='medidor_list'),
url(r'^medidores/new$', views.MedidorNew.as_view(), name='medidor_new'),
url(r'^medidores/delete/(?P<pk>\d+)$', views.MedidorDelete.as_view(), name='medidor_delete'),
url(r'^medidores/update/(?P<pk>\d+)$', views.MedidorUpdate.as_view(), name='medidor_update'),


# activos/views.py

from datetime import datetime, timedelta
import calendar

class AjaxableResponseMixinMedidor(object):

	template_name = 'viewer/activos/medidor_new.html'
	form_class = MedidorForm
	success_url = '/medidores/list'

	def form_invalid(self, form):
		response = super(AjaxableResponseMixinMedidor, self).form_invalid(form)
		if self.request.is_ajax():
			return JsonResponse(form.errors, status=400)
		else:
			return response

			def form_valid(self, form):

				obj = form.save(commit=False)
				obj.activo_id = self.kwargs['activo_id']
				obj.save()

				response = super(AjaxableResponseMixinMedidor, self).form_valid(form)
				if self.request.is_ajax():
					data = {
					'pk': 'self.object.pk',
					}
					return JsonResponse(data)
				else:
					return response

					class MedidorNew(AjaxableResponseMixinMedidor, FormView):

						def get_context_data(self, **kwargs):
							
							context = super(MedidorNew, self).get_context_data(**kwargs)
							context['title'] = 'Activos'
							context['subtitle'] = 'Medidor'
							context['name'] = 'Nuevo'
							context['href'] = 'medidores'
							context['accion'] = 'create'
							context['activo_id']	= self.kwargs['activo_id']

							return context
							
							class MedidorList(ListView):
								model = Medidor
								template_name = 'viewer/activos/medidor_list.html'

								def get_context_data(self, **kwargs):
									context = super(MedidorList, self).get_context_data(**kwargs)
									context['title'] = 'Activos'
									context['subtitle'] = 'Medidor'
									context['name'] = 'Lista'
									context['href'] = 'medidores'

									return context

									def get_queryset(self):

										user 		= User.objects.get(pk=self.request.user.pk)
										profile 	= UserProfile.objects.get(user=user)
										activos 	= Activo.objects.filter(empresa_id=profile.empresa_id).values_list('id', flat=True)

										queryset 	= Medidor.objects.filter(activo_id__in=activos, visible=True)

										return queryset

										class MedidorDelete(DeleteView):
											model = Medidor
											success_url = reverse_lazy('/locales/list')

											def delete(self, request, *args, **kwargs):
												self.object = self.get_object()
												self.object.visible = False
												self.object.save()
												payload = {'delete': 'ok'}
												return JsonResponse(payload, safe=False)

												class MedidorUpdate(UpdateView):

													model = Medidor
													form_class = MedidorForm
													template_name = 'viewer/activos/medidor_new.html'
													success_url = '/medidores/list'

													def get_context_data(self, **kwargs):
														
														context = super(MedidorUpdate, self).get_context_data(**kwargs)
														context['title'] = 'Activos'
														context['subtitle'] = 'Medidor'
														context['name'] = 'Editar'
														context['href'] = 'medidores'
														context['accion'] = 'update'
														return context


# viewer/templates/activos/activo_medidor_new.html

<div class="ibox-title">
<h5>Medidores</h5>
</div>

<div class="ibox-content">
<br>
<div class="row">
<div class="col-sm-12">

{{ form_medidor.management_form }}
{% for form in form_medidor %}
{% for hidden in form.hidden_fields %}
{{ hidden }}
{% endfor %}
{% endfor %}

<button type="button" class="btn btn-primary btn-xs pull-right" onclick="agregar_periodo_arriendo()"><i class="fa fa-plus"></i> Nuevo Medidor</button>
<table id="tabla-medidor" class="table">
<thead>
{% for form in form_medidor %}
{% if forloop.first %}
<th>
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.nombre.help_text }}" ></i>
{{ form.nombre.label_tag }}
</th>
<th>
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.numero_rotulo.help_text }}" ></i>
{{ form.numero_rotulo.label_tag }}
</th>
<th>
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia.help_text }}" ></i>
{{ form.potencia.label_tag }}
</th>
<th>
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_presente.help_text }}" ></i>
{{ form.potencia_presente.label_tag }}
</th>
<th>
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_fuera.help_text }}" ></i>
{{ form.potencia_fuera.label_tag }}
</th>
<th>
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.medidor_tipo.help_text }}" ></i>
{{ form.medidor_tipo.label_tag }}
</th>
<th></th>
{% endif %}
{% endfor %}
</thead>
<tbody>
{% for form in form_medidor %}
<tr>
<td>

<div class="form-group">
{{ form.nombre }}
<div class="container-error">
{{ form.nombre.errors }}
</div>
</div>
</td>
<td>

<div class="form-group">
{{ form.numero_rotulo }}
<div class="container-error">
{{ form.numero_rotulo.errors }}
</div>
</div>
</td>
<td>

<div class="form-group">

{{ form.potencia }}
<div class="container-error">
{{ form.potencia.errors }}
</div>
</div>
</td>
<td>

<div class="form-group">

{{ form.potencia_presente }}
<div class="container-error">
{{ form.potencia_presente.errors }}
</div>
</div>
</td>
<td>
<div class="form-group">

{{ form.potencia_fuera }}
<div class="container-error">
{{ form.potencia_fuera.errors }}
</div>
</div>
</td>
<td class="text-center">

<div class="form-group">

{{ form.medidor_tipo }}
<div class="container-error">
{{ form.medidor_tipo.errors }}
</div>
</div>
</td>
<td class="text-center delete">

<div class="form-group text-center">
{{ form.DELETE }}
<a class="btn btn-delete btn-bitbucket" onclick="open_modal_delete_child(this, 'Medidor')"><i class="fa fa-trash"></i></a>
</div>
</td>
</tr>
{% endfor %}
</tbody>
</table>
</div>
</div>
<br>
<a href="/activos/list"><button class="btn btn-w-m btn-sm btn-default" type="button">CANCELAR</button></a>
<button class="btn btn-w-m btn-sm btn-primary pull-right" type="submit">GUARDAR Y SALIR</button>
<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button" style="margin-right: 15px;" onclick="enviar_form('{{accion}}')">GUARDAR Y SEGUIR</button>
</div>


# activos/forms.py

class MedidorForm(forms.ModelForm):

	class Meta:
		model 	= Medidor
		fields 	= ['nombre','numero_rotulo','potencia','potencia_presente','potencia_fuera','medidor_tipo']

		widgets = {
		'nombre'			: forms.TextInput(attrs={'class': 'form-control'}),
		'numero_rotulo'		: forms.TextInput(attrs={'class': 'form-control'}),
		'potencia'			: forms.NumberInput(attrs={'class': 'form-control'}),
		'potencia_presente'	: forms.NumberInput(attrs={'class': 'form-control'}),
		'potencia_fuera'	: forms.NumberInput(attrs={'class': 'form-control'}),
		'medidor_tipo'		: forms.Select(attrs={'class': 'form-control'}),
		}

		error_messages = {
		'nombre' 		: {'required': 'campo requerido'},
		'numero_rotulo' : {'required': 'campo requerido'},
		'medidor_tipo' 	: {'required': 'campo requerido'},
		}

		help_texts = {
		'nombre'			: '...',
		'numero_rotulo'		: '...',
		'potencia'			: '...',
		'potencia_presente'	: '...',
		'potencia_fuera'	: '...',
		'medidor_tipo'		: '...',
		}

		labels = {
		'numero_rotulo'	: 'Número Rótulo',
		'medidor_tipo'	: 'Tipo de Medidor',
		}

		MedidorFormSet 	= inlineformset_factory(Activo, Medidor, form=MedidorForm, extra=1, can_delete=True)


# viewer/templates/viewer/contratos/contrato_new.html

<div class="ibox-title">
<h5>Nuevo Tipo de Contrato</h5>
</div>

<div class="ibox-content">
<div class="row">
<div class="col-xs-12">
<div>

<ul class="nav nav-tabs" role="tablist">
<li role="presentation" class="active"><a href="#page-1" aria-controls="page-1" role="tab" data-toggle="tab">Información General</a></li>
<li role="presentation"><a href="#page-2" aria-controls="page-2" role="tab" data-toggle="tab">Conceptos</a></li>
<li role="presentation"><a href="#page-3" aria-controls="page-3" role="tab" data-toggle="tab">Prorroga</a></li>
<li role="presentation"><a href="#page-4" aria-controls="page-4" role="tab" data-toggle="tab">Clausulas Conceptos</a></li>
<li role="presentation"><a href="#page-5" aria-controls="page-5" role="tab" data-toggle="tab">Poliza</a></li>
</ul>

<div class="tab-content">
<div role="tabpanel" class="tab-pane active" id="page-1">
<br>
<br>

<form id="form-contrato-new" role="form" action="" method="post">
{% csrf_token %}
<div class="row">

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.metros_local.help_text }}" ></i>
{{ form.metros_local.label_tag }}
{{ form.metros_local }}
<div class="container-error">
{{ form.metros_local.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.metros_otros.help_text }}" ></i>
{{ form.metros_otros.label_tag }}
{{ form.metros_otros }}
<div class="container-error">
{{ form.metros_otros.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.arriendo_local.help_text }}" ></i>
{{ form.arriendo_local.label_tag }}
{{ form.arriendo_local }}
<div class="container-error">
{{ form.arriendo_local.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.arriendo_otros.help_text }}" ></i>
{{ form.arriendo_otros.label_tag }}
{{ form.arriendo_otros }}
<div class="container-error">
{{ form.arriendo_otros.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.arriendo_porcentual.help_text }}" ></i>
{{ form.arriendo_porcentual.label_tag }}
{{ form.arriendo_porcentual }}
<div class="container-error">
{{ form.arriendo_porcentual.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.reajuste_porcentaje.help_text }}" ></i>
{{ form.reajuste_porcentaje.label_tag }}
{{ form.reajuste_porcentaje }}
<div class="container-error">
{{ form.reajuste_porcentaje.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.reajuste_meses.help_text }}" ></i>
{{ form.reajuste_meses.label_tag }}
{{ form.reajuste_meses }}
<div class="container-error">
{{ form.reajuste_meses.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.fondo_promocion.help_text }}" ></i>
{{ form.fondo_promocion.label_tag }}
{{ form.fondo_promocion }}
<div class="container-error">
{{ form.fondo_promocion.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.cuota_promocion.help_text }}" ></i>
{{ form.cuota_promocion.label_tag }}
{{ form.cuota_promocion }}
<div class="container-error">
{{ form.cuota_promocion.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.gasto_comun_local.help_text }}" ></i>
{{ form.gasto_comun_local.label_tag }}
{{ form.gasto_comun_local }}
<div class="container-error">
{{ form.gasto_comun_local.errors }}
</div>
</div>

<div class="form-group col-sm-3">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.gasto_comun_otros.help_text }}" ></i>
{{ form.gasto_comun_otros.label_tag }}
{{ form.gasto_comun_otros }}
<div class="container-error">
{{ form.gasto_comun_otros.errors }}
</div>
</div>
</div>
<br>

<button class="btn btn-w-m btn-sm btn-primary pull-right" type="submit">GUARDAR Y SALIR</button>
<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button" style="margin-right: 15px;" onclick="enviar_form('{{accion}}')">GUARDAR Y SEGUIR</button>
<a href="/contratos-tipo/list"><button class="btn btn-w-m btn-sm btn-success pull-right" type="button" style="margin-right: 15px;">CANCELAR</button></a>
</form>
</div>

<div role="tabpanel" class="tab-pane" id="page-2"></div>

<div role="tabpanel" class="tab-pane" id="page-3">
<br>
<br>
<table id="tabla-formulas" class="table table-striped">
<thead> 
<tr> 
<th>Nº Secuencia</th>
<th>F.Inicio</th>
<th>F.Termino</th>
<th>Nº Meses</th>
<th>F. Apertura</th>
</tr>
</thead>
<tbody>
<tr>
<td><input type="text"></td>
<td><input type="text"></td>
<td><input type="text"></td>
<td><input type="text"></td>
<td><input type="text"></td>
</tr>
</tbody> 
</table>
<br>
<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button">GUARDAR</button>
</div>

<div role="tabpanel" class="tab-pane" id="page-4">
<br>
<br>
<table id="tabla-formulas" class="table table-striped">
<thead>
<tr>
									<th>#</th>
									<th>Tipo</th>
									<th>Aplica en</th>
									<th>Concepto</th>
									<th>Factor</th>
									<th>Moneda</th>
									<th>F.Inicio</th>
									<th>F.Termino</th>
									</tr>
									</thead>
									<tbody>
									<tr>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									</tr>
									</tbody>
									</table>
									<br>
									<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button">GUARDAR</button>
									</div>

									<div role="tabpanel" class="tab-pane" id="page-5">
									<br>
									<br>
									<table id="tabla-formulas" class="table table-striped">
									<thead>
									<tr>
									<th>Nº Poliza</th>
									<th>Compañia</th>
									<th>Moneda</th>
									<th>Monto Asegurado</th>
									<th>Valor Prima</th>
									<th>F.Vigencia</th>
									<th>F.Vencimiento</th>
									<th>Nº Cuotas</th>
									<th>Nº Endoso</th>
									<th>F.Inicio</th>
									<th>Nº Cuotas</th>
									<th>Estado</th>
									</tr>
									</thead>
									<tbody>
									<tr>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									<td><input type="text"></td>
									</tr>
									</tbody>
									</table>
									<br>
									<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button">GUARDAR</button>
									</div>
									</div>
									</div>
									</div>
									</div>
									</div>


# administrador/models.py

class Unidad_Negocio(models.Model):

	# atributos (generales)
	nombre      = models.CharField(max_length=250)
	codigo      = models.CharField(max_length=250, blank=True)
	descripcion = models.TextField(blank=True)
	
	# atributos (por defecto)
	visible     = models.BooleanField(default=True)
	creado_en   = models.DateTimeField(auto_now=True)

	# relaciones
	empresa = models.ForeignKey(Empresa)

	def __str__(self):
		return self.nombre


# administrador/urls.py

url(r'^unidades-negocio/list$', views.UnidadNegocioList.as_view(), name='unidad_negocio_list'),
url(r'^unidades-negocio/new$', views.UnidadNegocioNew.as_view(), name='unidad_negocio_new'),
url(r'^unidades-negocio/delete/(?P<pk>\d+)$', views.UnidadNegocioDelete.as_view(), name='unidad_negocio_delete'),
url(r'^unidades-negocio/update/(?P<pk>\d+)$', views.UnidadNegocioUpdate.as_view(), name='unidad_negocio_update'),

# administrador/views.py

class UnidadNegocioMixin(object):

	template_name = 'viewer/configuracion/unidad_negocio_new.html'
	form_class = UnidadNegocioForm
	success_url = '/unidades-negocio/list'

	def form_invalid(self, form):
		response = super(UnidadNegocioMixin, self).form_invalid(form)
		if self.request.is_ajax():
			return JsonResponse(form.errors, status=400)
		else:
			return response

			def form_valid(self, form):

				user 	= User.objects.get(pk=self.request.user.pk)
				profile = UserProfile.objects.get(user=user)

				obj = form.save(commit=False)
				obj.empresa_id = profile.empresa_id
				obj.save()

				response = super(UnidadNegocioMixin, self).form_valid(form)
				if self.request.is_ajax():
					data = {
					'pk': 'self.object.pk',
					}
					return JsonResponse(data)
				else:
					return response

					class UnidadNegocioNew(UnidadNegocioMixin, FormView):

						def get_context_data(self, **kwargs):
							
							context = super(UnidadNegocioNew, self).get_context_data(**kwargs)
							context['title'] = 'Unidades de Negocio'
							context['subtitle'] = 'Unidad de Negocio'
							context['name'] = 'Nueva'
							context['href'] = 'unidades-negocio'
							context['accion'] = 'create'

							return context

							class UnidadNegocioList(ListView):
								model = Unidad_Negocio
								template_name = 'viewer/configuracion/unidad_negocio_list.html'

								def get_context_data(self, **kwargs):
									context = super(UnidadNegocioList, self).get_context_data(**kwargs)
									context['title'] = 'Unidades de Negocio'
									context['subtitle'] = 'Unidad de Negocio'
									context['name'] = 'Lista'
									context['href'] = 'unidades-negocio'

									return context

									def get_queryset(self):

										user 		= User.objects.get(pk=self.request.user.pk)
										profile 	= UserProfile.objects.get(user=user)
										queryset 	= Unidad_Negocio.objects.filter(empresa=profile.empresa, visible=True)

										return queryset

										class UnidadNegocioDelete(DeleteView):
											model = Unidad_Negocio
											success_url = reverse_lazy('/unidades-negocio/list')

											def delete(self, request, *args, **kwargs):
												self.object = self.get_object()
												self.object.visible = False
												self.object.save()
												payload = {'delete': 'ok'}
												return JsonResponse(payload, safe=False)

												class UnidadNegocioUpdate(UpdateView):

													model = Unidad_Negocio
													form_class = UnidadNegocioForm
													template_name = 'viewer/configuracion/unidad_negocio_new.html'
													success_url = '/unidades-negocio/list'

													def get_context_data(self, **kwargs):
														
														context = super(UnidadNegocioUpdate, self).get_context_data(**kwargs)
														context['title'] = 'Unidades de Negocio'
														context['subtitle'] = 'Unidad de Negocio'
														context['name'] = 'Editar'
														context['href'] = 'unidades-negocio'
														context['accion'] = 'update'
														return context


# administrador/forms.py

class UnidadNegocioForm(forms.ModelForm):

	class Meta:
		model 	= Unidad_Negocio
		fields 	= ['nombre', 'codigo', 'descripcion']

		widgets = {
		'nombre'		: forms.TextInput(attrs={'class': 'form-control'}),
		'codigo'		: forms.TextInput(attrs={'class': 'form-control'}),
		'descripcion'	: forms.Textarea(attrs={'class': 'form-control', 'rows':'1'}),
		}

		error_messages = {
		'nombre' : {'required': 'campo requerido'},
		'codigo' : {'required': 'campo requerido'},
		}


# viewer/templates/viewer/configuracion/unidad_negocio_list.html

{% extends 'index.html' %}
{% block section %}

{% include 'partials/breadcrumbs-bar.html' %}

<div class="wrapper wrapper-content">
<div class="row">
<div class="col-lg-12">
<div class="ibox float-e-margins">
<div class="ibox-title">
<h5>Lista de Unidades de Negocio</h5>
<div class="ibox-tools">
<a href="/unidades-negocio/new">
<button type="button" class="btn btn-primary btn-xs"><i class="fa fa-plus"></i> nueva unidad de negocio</button>
</a>
</div>
</div>
<div class="ibox-content">
<br>
<div class="table-responsive">
<table id="tabla-unidades-negocio" class="table table-striped table-bordered table-hover dataTables-example" >
<thead></thead>
<tbody>
{% for item in object_list %}
<tr>
<td>{{ item.id }}</td>
<td>{{ item.codigo }}</td>
<td>{{ item.nombre }}</td>
<td>{{ item.descripcion }}</td>

<td class="text-center">
<a class="btn btn-edit btn-bitbucket" href='{% url "unidad_negocio_update" item.id %}'><i class="fa fa-edit"></i></a>
<a class="btn btn-delete btn-bitbucket" onclick="open_modal_delete(this, {{item.id}}, 'unidades-negocio', 'tabla-unidades-negocio', 'Unidad de Negocio')"><i class="fa fa-trash"></i></a>
<a class="btn btn-view btn-bitbucket"><i class="fa fa-eye"></i></a>
</td>
</tr>
{% endfor %}
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>

{% endblock section %}

{% block scripts %}
<script>

$(document).ready(function(){

	var tabla_unidades_negocio = []

	var columns = [
	{		
	'data': 'id',
	'title': 'ID',
	'visible': false,
	},
	{
	'width': '15%',
	'data': 'codigo',
	'title': 'Código',
	},
	{
	'width': '15%',
	'data': 'nombre',
	'title': 'Nombre',
	},
	{
	'width': '55%',
	'data': 'descripcion',
	'title': 'Descripción',
	},
	{
	'width': '15%',
	'data': 'options',
	'orderable': false,
	}]

	tabla_unidades_negocio = load_table('#tabla-unidades-negocio', columns, {})

	});

</script>

{% endblock scripts %}


# viewer/templates/viewer/configuracion/unidad_negocio_new.html

{% extends 'index.html' %}
{% block section %}

{% include 'partials/breadcrumbs-bar.html' %}

<div class="wrapper wrapper-content">
<div class="row">
<div class="col-lg-12">
<div class="ibox float-e-margins">
<div class="ibox-title">
<h5>Nueva Unidad de Negocio</h5>
</div>
<div class="ibox-content">
<div class="row">
<div class="col-sm-12">

<form id="form-medidor-new" role="form" action="" method="post">
{% csrf_token %}

<div class="row">
{% for field in form %}
<div class="form-group col-sm-4">
<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ field.help_text }}" ></i>
{{ field.label_tag }}
{{ field }}
<div class="container-error">
{{ field.errors }}
</div>
</div>
{% endfor %}
</div>
<br>

<a href="/unidades-negocio/list"><button class="btn btn-w-m btn-sm btn-default" type="button">CANCELAR</button></a>
<button class="btn btn-w-m btn-sm btn-primary pull-right" type="submit">GUARDAR Y SALIR</button>
<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button" style="margin-right: 15px;" onclick="guardar_formulario('{{accion}}', 'form-medidor-new')">GUARDAR Y SEGUIR</button>

</form>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

{% endblock section %}

{% block scripts %}
<script>

$(document).ready(function(){
	})

</script>
{% endblock scripts %}

# activos/models.py

class Medidor_Tipo(models.Model):

	# atributos (generales)
	nombre 		= models.CharField(max_length=250)
	codigo 		= models.CharField(max_length=250, blank=True)	
	descripcion = models.TextField(blank=True)

	# atributos (por defecto)
	visible 	= models.BooleanField(default=True)
	creado_en 	= models.DateTimeField(auto_now=True)

	def __str__(self):
		return self.nombre

		class Medidor(models.Model):

# atributos (generales)
nombre 				= models.CharField(max_length=250)
numero_rotulo 		= models.CharField(max_length=250)
potencia			= models.FloatField(default=0, null=True, blank=True)
potencia_presente	= models.FloatField(default=0, null=True, blank=True)
potencia_fuera		= models.FloatField(default=0, null=True, blank=True)
estado 				= models.BooleanField(default=False)

# atributos (por defecto)
visible 			= models.BooleanField(default=True)
creado_en 			= models.DateTimeField(auto_now=True)

# relaciones
activo 			= models.ForeignKey(Activo)
medidor_tipo 	= models.ForeignKey(Medidor_Tipo)

def __str__(self):
	return self.medidor_tipo.nombre+'-'+self.nombre

# contrato/models.py {modelo Contrato}

aviso 				= models.IntegerField()
metros_local		= models.FloatField(null=True, blank=True)
metros_otros		= models.FloatField(null=True, blank=True)
arriendo_local		= models.FloatField(null=True, blank=True)
arriendo_otros		= models.FloatField(null=True, blank=True)
arriendo_porcentual	= models.FloatField(null=True, blank=True)
reajuste_porcentaje	= models.FloatField(null=True, blank=True)
reajuste_meses		= models.FloatField(null=True, blank=True)
fondo_promocion		= models.FloatField(null=True, blank=True)
cuota_promocion 	= models.FloatField(null=True, blank=True)
arriendo_diciembre 	= models.CharField(max_length=250)
inicio_renta 		= models.CharField(max_length=250)
gasto_comun_local 	= models.FloatField(null=True, blank=True)
gasto_comun_otros 	= models.FloatField(null=True, blank=True)

# contrato/urls.py

url(r'^contrato/pdf/(?P<pk>\d+)$', views.contratoPdf, name='contrato_pdf'),

# contrato/views.py

from reportlab.pdfgen import canvas
from reportlab.lib.enums import TA_RIGHT, TA_CENTER, TA_JUSTIFY, TA_LEFT
from reportlab.lib.pagesizes import LEGAL, A4, cm
from reportlab.lib.pagesizes import landscape
from reportlab.pdfgen import canvas
from reportlab.platypus import *
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

def makeReportData(detalle):

	contrato_list = list()
	cabecera_list = list()
	for j in detalle['contrato']:
		detalle_contrato = list()
		detalle_contrato.append(j['nombre_contrato'])
		detalle_contrato.append(j['monto'])
		contrato_list.append(detalle_contrato)


		styles = getSampleStyleSheet()
		styleBH = styles["Title"]
		styleBH.alignment = TA_LEFT
		styleBH.fontSize = 8
		styleBH.leading = 15
		styleBH.underline = 1

		cabecera_list.append('Contrato')
		cabecera_list.append('Monto')

		for a in cabecera_list:
			Paragraph(a, styleBH)

			libroreporte = []


			lines_cabecera = tuple(cabecera_list)
			libroreporte += lines_cabecera,

			for a in contrato_list:
				lines = tuple(a)
				libroreporte += lines,


				return libroreporte

				def contratoPdf(request, pk):
					array_elementos = list()
					contrato_list 	= list()
					total 	= 0
					proceso = Proceso.objects.get(pk=pk)

					for detalle in proceso.proceso_detalle_set.all():

						contrato_list.append({
							'id':detalle.id,
							'nombre_contrato':detalle.contrato_id,
							'monto':detalle.total,
							})

						array_elementos.append({
							'id': 1,
							'concepto': 'arriendos',
							'contrato': contrato_list
							})


						response = HttpResponse(content_type='application/pdf')
						response['Content-Disposition'] = 'attachment; filename="somefilename.pdf"'
						
	# Create the PDF object, using the response object as its "file."
	c = canvas.Canvas(response)


	# c = canvas.Canvas(pagesize=landscape(A4))
	c.setLineWidth(.3)

	# contrato_list= list()
	# contrato_list.append({
	# 	'id' : 1,
	# 	'nombre_contrato': "contrato 1",
	# 	'monto' : 5000
	# })

	# contrato_list.append({
	# 	'id': 1,
	# 	'nombre_contrato': "contrato 2",
	# 	'monto': 10000
	# })

	# array_elementos = list()
	# array_elementos.append({
	# 	'id': 1,
	# 	'concepto': 'arriendos',
	# 	'contrato': contrato_list
	# })
wd, hg = A4
	##GENERACION DOCUMENTO
	for a in array_elementos:

		##GENERACION TABLA DEL DOCUMENTO
		hight = 600

		table = Table(makeReportData(a),
			colWidths=[2.1 * cm, 4.1 * cm, 3.1 * cm, 2.9 * cm, 2.9 * cm, 2.9 * cm, 2.9 * cm,
			2.9 * cm, 2.5 * cm, 2 * cm])

		table.setStyle(TableStyle([
			('FONTSIZE', (0, 1), (-1, -1), 8),
			]))

		table.setStyle(TableStyle([("LINEBELOW", (0, 0), (-1, 1), 0.25, colors.black)]))

		table.wrapOn(c, wd, hg)
		# table.drawOn(c, 30, hight - (a.__len__() * 36) - 30)
		table.drawOn(c, 30, hight)

		c.showPage()

		c.save()

		return response

		def arriendo(request, id=None):
	# if this is a POST request we need to process the form data
	if request.method == 'POST':
		# create a form instance and populate it with data from the request:
		form = NameForm(request.POST)
		# check whether it's valid:
		if form.is_valid():
			# process the data in form.cleaned_data as required
			# ...
			# redirect to a new URL:
			return HttpResponseRedirect('/thanks/')

	# if a GET (or any other method) we'll create a blank form
else:
	form = NameForm()

	return render(request, 'viewer/contratos/contrato_arriendo.html', {'form': form})

# viewer/templates/procesos/procesos_list.html

function send_data_contratos(){

var data 			= {}
var contratos 		= []
var tabla_contrato 	= $('#tabla-contratos').dataTable();

data.fecha_inicio 	= '01-01-2015' 
data.fecha_termino 	= '31-12-2015' 

$('.checkbox-contrato:checked', tabla_contrato.fnGetNodes()).each(function(i){

	contrato 			= {}
	contrato.id 		= $(this).val()
	contrato.conceptos 	= [1] 

	contratos.push(contrato)
	})

data.contratos = JSON.stringify(contratos)

console.log(data)

$.ajax({
	url: '/procesos/contratos/propuesta',
	type: 'POST',
	data: data,
	success: function (response) {
	console.log(response)
	},
	error: function(response){

	}
	})

// $.post('/procesos/contratos/propuesta',{
	// 	'data': data,
	// 	csrfmiddlewaretoken: getCookie('csrftoken')
	// },
	// function(response){
	// 	console.log(response)
	// })

}

# operaciones/urls.py

url(r'^lectura-medidores/new$', views.LecturaMedidorNew.as_view(), name='lectura_medidor_new'),
url(r'^lectura-medidores/delete/(?P<pk>\d+)$', views.LecturaMedidorDelete.as_view(), name='lectura_medidor_delete'),
url(r'^lectura-medidores/update/(?P<pk>\d+)$', views.LecturaMedidorUpdate.as_view(), name='lectura_medidor_update'),

# operaciones/forms.py

class LecturaMedidorForm(forms.ModelForm):

	fecha = forms.DateField(input_formats=['%d/%m/%Y'], widget=forms.TextInput(attrs={'class': 'form-control format-date'}), error_messages={'required': 'campo requerido', 'invalid': 'campo invalido'})

	class Meta:

		model 	= Lectura_Medidor
		fields 	= '__all__'
		exclude = [ 'visible', 'creado_en', 'user', 'imagen_type', 'imagen_size']

		widgets = {
		'valor'			: forms.NumberInput(attrs={'class': 'form-control'}),
		'mes'			: forms.Select(attrs={'class': 'form-control'}),
		'imagen_file'	: forms.FileInput(attrs={'class': 'file-format'}),
		}

		error_messages = {
		'valor' 		: {'required': 'campo requerido'},
		}

		labels = {
		'valor'			: 'Lectura',
		'imagen_file'	: 'Cargar Imagen',
		}

		help_texts = {
		'valor'			: '...',
		'imagen_file'	: '...',
		}

# operaciones/views.py

class LecturaMedidorMixin(object):

	template_name = 'viewer/operaciones/lectura_medidor_new.html'
	form_class = LecturaMedidorForm
	success_url = '/lectura-medidores/list'

	def form_invalid(self, form):
		response = super(LecturaMedidorMixin, self).form_invalid(form)
		if self.request.is_ajax():
			return JsonResponse(form.errors, status=400)
		else:
			return response

			def form_valid(self, form):
				user 	= User.objects.get(pk=self.request.user.pk)
				profile = UserProfile.objects.get(user=user)

				obj = form.save(commit=False)
				obj.user = user
		# obj.empresa_id = profile.empresa_id
		obj.save()

		response = super(LecturaMedidorMixin, self).form_valid(form)
		if self.request.is_ajax():
			data = {
			'pk': 'self.object.pk',
			}
			return JsonResponse(data)
		else:
			return response

			class LecturaMedidorNew(LecturaMedidorMixin, FormView):
				def get_context_data(self, **kwargs):
					
					context = super(LecturaMedidorNew, self).get_context_data(**kwargs)
					context['title'] = 'Operaciones'
					context['subtitle'] = 'Lectura Medidor'
					context['name'] = 'Nueva'
					context['href'] = 'lectura-medidores'
					context['accion'] = 'create'
					return context

					class LecturaMedidorDelete(DeleteView):
						model = Lectura_Medidor
						success_url = reverse_lazy('/contratos-tipo/list')

						def delete(self, request, *args, **kwargs):
							self.object = self.get_object()
							self.object.visible = False
							self.object.save()
							payload = {'delete': 'ok'}
							return JsonResponse(payload, safe=False)

							class LecturaMedidorUpdate(LecturaMedidorMixin, UpdateView):

								model 			= Lectura_Medidor
								form_class 		= LecturaMedidorForm
								template_name 	= 'viewer/operaciones/lectura_medidor_new.html'
								success_url 	= '/lectura-medidores/list'

								def get_object(self, queryset=None):

									queryset = Lectura_Medidor.objects.get(id=int(self.kwargs['pk']))

									if queryset.fecha:
										queryset.fecha = queryset.fecha.strftime('%d/%m/%Y')

										return queryset

										def get_context_data(self, **kwargs):
											
											context = super(LecturaMedidorUpdate, self).get_context_data(**kwargs)
											context['title'] 	= 'Operaciones'
											context['subtitle'] = 'Lectura Medidores'
											context['name'] 	= 'Editar'
											context['href'] 	= 'lectura-medidores'
											context['accion'] 	= 'update'
											return context


# viewer/tamplates/viewer/contratos/contrato_arriendo_new.html

{% extends 'index.html' %}
{% block section %}

{% include 'partials/breadcrumbs-bar.html' %}

<div class="wrapper wrapper-content">
	<div class="row">
		<div class="col-lg-12">
			<div class="ibox float-e-margins">
				<div class="ibox-title">
					<h5>Nuevo Arriendo</h5>
				</div>
				<div class="ibox-content">
					<div class="row">
						<div class="col-sm-12">

							<form id="form-arriendo-new" role="form" action="" method="post">
								{% csrf_token %}

								{{ formset_detalle.management_form }}
								{% for form in formset_detalle %}
								{% for hidden in form.hidden_fields %}
								{{ hidden }}
								{% endfor %}
								{% endfor %}

								<table id="tabla-arriendo" class="table">
									<thead>
										{% for form in formset_detalle %}
										{% if forloop.first %}
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.mes_inicio.help_text }}" ></i>
											{{ form.mes_inicio.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.mes_termino.help_text }}" ></i>
											{{ form.mes_termino.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.valor.help_text }}" ></i>
											{{ form.valor.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.moneda.help_text }}" ></i>
											{{ form.moneda.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.metro_cuadrado.help_text }}" ></i>
											{{ form.metro_cuadrado.label_tag }}
										</th>

										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="eliminar" ></i>
											<label>ELiminar:</label>
										</th>
										{% endif %}
										{% endfor %}
									</thead>
									<tbody>
										{% for form in formset_detalle %}
										<tr>
											<td>

												<div class="form-group">
													{{ form.mes_inicio }}
													<div class="container-error">
														{{ form.mes_inicio.errors }}
													</div>
												</div>
											</td>
											<td>

												<div class="form-group">
													{{ form.mes_termino }}
													<div class="container-error">
														{{ form.mes_termino.errors }}
													</div>
												</div>
											</td>
											<td>

												<div class="form-group">

													{{ form.valor }}
													<div class="container-error">
														{{ form.valor.errors }}
													</div>
												</div>
											</td>
											<td>

												<div class="form-group">

													{{ form.moneda }}
													<div class="container-error">
														{{ form.moneda.errors }}
													</div>
												</div>
											</td>
											<td class="text-center">

												<div class="form-group">

													{{ form.metro_cuadrado }}
													<div class="container-error">
														{{ form.metro_cuadrado.errors }}
													</div>
												</div>
											</td>
											<td class="text-center">

												<div class="form-group">

													{{ form.DELETE }}
												</div>
											</td>
										</tr>
										{% endfor %}
									</tbody>
								</table>


								<div class="row">

									<input type="hidden" id="id_contrato" name="contrato" value="{{contrato_id}}">

									<div class="form-group col-sm-2">
										<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.reajuste.help_text }}" ></i>
										{{ form.reajuste.label_tag }}
										{{ form.reajuste }}
										<div class="container-error">
											{{ form.reajuste.errors }}
										</div>
									</div>

									<div class="form-group col-sm-2">
										<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.meses.help_text }}" ></i>
										{{ form.meses.label_tag }}
										{{ form.meses }}
										<div class="container-error">
											{{ form.meses.errors }}
										</div>
									</div>

									<div class="form-group col-sm-2">
										<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.valor.help_text }}" ></i>
										{{ form.valor.label_tag }}
										{{ form.valor }}
										<div class="container-error">
											{{ form.valor.errors }}
										</div>
									</div>

									<div class="form-group col-sm-3">
										<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.moneda.help_text }}" ></i>
										{{ form.moneda.label_tag }}
										{{ form.moneda }}
										<div class="container-error">
											{{ form.moneda.errors }}
										</div>
									</div>

									<div class="form-group col-sm-3">
										<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.fecha_inicio.help_text }}" ></i>
										{{ form.fecha_inicio.label_tag }}
										<div class="input-group date">
											{{ form.fecha_inicio }}
											<span class="input-group-addon">
												<i class="fa fa-calendar"></i>
											</span>
										</div>

										<div class="container-error">
											{{ form.fecha_inicio.errors }}
										</div>
									</div>

								</div>

								<br>
								<button class="btn btn-w-m btn-sm btn-primary pull-right" type="submit">GUARDAR Y SALIR</button>
								<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button" style="margin-right: 15px;" onclick="enviar_form('{{accion}}')">GUARDAR Y SEGUIR</button>
								<a href="/contratos-tipo/list">
									<button class="btn btn-w-m btn-sm btn-success pull-right" type="button" style="margin-right: 15px;">CANCELAR</button>
								</a>
							</form>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

{% endblock section %}

{% block scripts %}
<script>

$(document).ready(function(){
	var configuracion = {
		'order': false,
		'paginate': false,
		'bLengthChange': false,
		'bInfo': false,
		'buttons': [],
	} 


	var columns = [
	{
		'width': '15%',
		'orderable': false,
		'data': 'mes_inicio',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'mes_termino',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'valor',
	},
	{
		'width': '20%',
		'orderable': false,
		'data': 'moneda',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'metros',
	},
	{
		'width': '10%',
		'orderable': false,
		'data': 'eliminar',
	}];

	var table = load_table('#tabla-arriendo', columns, configuracion)

});

function enviar_form(accion){
	$.ajax({
		type: 'post',
		url: $('#form-arriendo-new').attr('action'),
		data: $('#form-arriendo-new').serialize(),
		success: function(response) {

			if (accion == 'create') {
				clear_form('#form-arriendo-new')
			}
			clear_errors_form('#form-arriendo-new')

			notification_toast('success', 'ÉXITO', 'Guardado correctamente.')
		},
		error: function(data, textStatus, jqXHR) {

			clear_errors_form('#form-arriendo-new')

			var errors = $.parseJSON(data.responseText)
			apply_errors_form(errors)
		}
	});
	return false;
	
}

</script>
{% endblock scripts %}

# activos/forms.py

class ActivoMedidoForm(forms.ModelForm):

	class Meta:
		model 	= Activo
		fields 	= ['id']

class LocalForm(forms.ModelForm):

	def __init__(self, *args, **kwargs):

		self.request 	= kwargs.pop('request')
		activo_id 		= kwargs.pop('activo_id', None)
		local_id 		= kwargs.pop('local_id', None)
		user 			= User.objects.get(pk=self.request.user.pk)
		profile 		= UserProfile.objects.get(user=user)

		super(LocalForm, self).__init__(*args, **kwargs)

		activo = Activo.objects.get(id=activo_id)

		if local_id is not None:
			locales = activo.local_set.all().values_list('id', flat=True).exclude(id__in=local_id)
		else:
			locales = activo.local_set.all().values_list('id', flat=True)

		medidores_locales_electricidad 					= Medidor_Electricidad.objects.filter(local__in=locales)
		medidores_locales_agua 							= Medidor_Agua.objects.filter(local__in=locales)
		medidores_locales_gas 							= Medidor_Gas.objects.filter(local__in=locales)

		self.fields['medidores_electricidad'].queryset 	= Medidor_Electricidad.objects.filter(activo_id=activo).exclude(id__in=medidores_locales_electricidad)
		self.fields['medidores_agua'].queryset 			= Medidor_Agua.objects.filter(activo_id=activo).exclude(id__in=medidores_locales_agua)
		self.fields['medidores_gas'].queryset 			= Medidor_Gas.objects.filter(activo_id=activo).exclude(id__in=medidores_locales_gas)

		self.fields['local_tipo'].queryset 				= Local_Tipo.objects.filter(empresa=profile.empresa)
		self.fields['sector'].queryset 					= Sector.objects.filter(activo=activo)
		self.fields['nivel'].queryset 					= Nivel.objects.filter(activo=activo)
		self.fields['medidores_electricidad'].required 	= False
		self.fields['medidores_agua'].required 			= False
		self.fields['medidores_gas'].required 			= False

# activos/views.py

class ActivoLocaleMixin(object):

	template_name = 'viewer/activos/activo_local_new.html'
	form_class = LocalForm
	success_url = '/locales/list'

	def get_form_kwargs(self):

		kwargs = super(ActivoLocaleMixin, self).get_form_kwargs()

		kwargs['request'] 	= self.request
		kwargs['activo_id'] = self.kwargs['activo_id']

		try:
			kwargs['local_id'] = self.kwargs['pk']
		except KeyError:
			pass

		return kwargs

class ActivoMedidorMixin(object):

	template_name = 'viewer/activos/activo_medidor_new.html'
	form_class = ActivoMedidoForm
	success_url = '/activos/list'

	def form_invalid(self, form):

		response = super(ActivoMedidorMixin, self).form_invalid(form)
		if self.request.is_ajax():
			return JsonResponse(form.errors, status=400)
		else:
			return response

	def form_valid(self, form):

		context 			= self.get_context_data()
		form_electricidad 	= context['form_electricidad']
		form_gas 			= context['form_gas']
		form_agua 			= context['form_agua']

		if form_electricidad.is_valid():
			form_electricidad.save()

		if form_agua.is_valid():
			form_agua.save()

		if form_gas.is_valid():
			form_gas.save()

		response = super(ActivoMedidorMixin, self).form_valid(form)
		if self.request.is_ajax():
			data = {
				'status': 'ok',
			}
			return JsonResponse(data)
		else:
			return response

class ActivoMedidorNew(ActivoMedidorMixin, FormView):

	def get_context_data(self, **kwargs):

		context 				= super(ActivoMedidorNew, self).get_context_data(**kwargs)
		context['title'] 		= 'Activos'
		context['subtitle'] 	= 'Medidor'
		context['name'] 		= 'Nuevo'
		context['href'] 		= 'activos'
		context['accion'] 		= 'update'
		context['activo_id']	= self.kwargs['activo_id']

		if self.request.POST:

			activo 	= Activo.objects.get(id=self.kwargs['activo_id'])

			try:
				medidor_electricidad = Medidor_Electricidad.objects.filter(activo_id=self.kwargs['activo_id'])
				context['form_electricidad'] = ElectricidadFormSet(self.request.POST, instance=activo)
			except Medidor_Electricidad.DoesNotExist:
				context['form_electricidad'] = ElectricidadFormSet(self.request.POST)

			try:
				medidor_agua = Medidor_Agua.objects.filter(activo_id=self.kwargs['activo_id'])
				context['form_agua'] = AguaFormSet(self.request.POST, instance=activo)
			except Medidor_Agua.DoesNotExist:
				context['form_agua'] = AguaFormSet(self.request.POST)

			try:
				medidor_gas = Medidor_Gas.objects.filter(activo_id=self.kwargs['activo_id'])
				context['form_gas'] = GasFormSet(self.request.POST, instance=activo)
			except Medidor_Gas.DoesNotExist:
				context['form_gas'] = GasFormSet(self.request.POST)

		else:

			activo 	= Activo.objects.get(id=self.kwargs['activo_id'])

			try:
				medidor_electricidad = Medidor_Electricidad.objects.filter(activo_id=self.kwargs['activo_id'])
				context['form_electricidad'] = ElectricidadFormSet(instance=activo)
			except Medidor_Electricidad.DoesNotExist:
				context['form_electricidad'] = ElectricidadFormSet()

			try:
				medidor_agua = Medidor_Agua.objects.filter(activo_id=self.kwargs['activo_id'])
				context['form_agua'] = AguaFormSet(instance=activo)
			except Medidor_Agua.DoesNotExist:
				context['form_agua'] = AguaFormSet()

			try:
				medidor_gas = Medidor_Gas.objects.filter(activo_id=self.kwargs['activo_id'])
				context['form_gas'] = GasFormSet(instance=activo)
			except Medidor_Gas.DoesNotExist:
				context['form_gas'] = GasFormSet()

		return context

# viewer/templates/viewer/activos/activo_medidor_new.html

{% extends 'index.html' %}
{% block section %}

{% include 'partials/breadcrumbs-bar.html' %}

<div class="wrapper wrapper-content">
	<div class="row">
		<div class="col-lg-12">
			<div class="ibox float-e-margins">
				<form id="form-medidor-new" role="form" action="" method="post">

					{% csrf_token %}

					<div class="ibox-title">
						<h5>Medidores de Electricidad</h5>
					</div>

					<div class="ibox-content">
						<br>
						<div class="row">
							<div class="col-sm-12">

								{{ form_electricidad.management_form }}
								{% for form in form_electricidad %}
								{% for hidden in form.hidden_fields %}
								{{ hidden }}
								{% endfor %}
								{% endfor %}

								<button type="button" class="btn btn-primary btn-xs pull-right" onclick="agregar_fila('tabla-electricidad', 'medidor_electricidad')"><i class="fa fa-plus"></i> Medidor de Electricidad</button>
								<table id="tabla-electricidad" class="table">
									<thead>
										{% for form in form_electricidad %}
										{% if forloop.first %}
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.nombre.help_text }}" ></i>
											{{ form.nombre.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.numero_rotulo.help_text }}" ></i>
											{{ form.numero_rotulo.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia.help_text }}" ></i>
											{{ form.potencia.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_presente.help_text }}" ></i>
											{{ form.potencia_presente.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_fuera.help_text }}" ></i>
											{{ form.potencia_fuera.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.tarifa_electricidad.help_text }}" ></i>
											{{ form.tarifa_electricidad.label_tag }}
										</th>
										<th></th>
										{% endif %}
										{% endfor %}
									</thead>
									<tbody>
										{% for form in form_electricidad %}
										<tr>
											<td>
												<div class="form-group">
													{{ form.nombre }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.numero_rotulo }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia_presente }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia_fuera }}
												</div>
											</td>
											<td class="text-center">
												<div class="form-group">
													{{ form.tarifa_electricidad }}
												</div>
											</td>
											<td class="text-center delete">
												<div class="form-group text-center">
													{{ form.DELETE }}
													<a class="btn btn-delete btn-bitbucket" onclick="open_modal_delete_child(this, 'Medidor')"><i class="fa fa-trash"></i></a>
												</div>
											</td>
										</tr>
										{% endfor %}
									</tbody>
								</table>
							</div>
						</div>
					</div>


					<div class="ibox-title">
						<h5>Medidores de Agua</h5>
					</div>

					<div class="ibox-content">
						<br>
						<div class="row">
							<div class="col-sm-12">

								{{ form_agua.management_form }}
								{% for form in form_agua %}
								{% for hidden in form.hidden_fields %}
								{{ hidden }}
								{% endfor %}
								{% endfor %}

								<button type="button" class="btn btn-primary btn-xs pull-right" onclick="agregar_fila('tabla-agua', 'medidor_agua')"><i class="fa fa-plus"></i> Medidor de Agua</button>
								<table id="tabla-agua" class="table">
									<thead>
										{% for form in form_agua %}
										{% if forloop.first %}
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.nombre.help_text }}" ></i>
											{{ form.nombre.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.numero_rotulo.help_text }}" ></i>
											{{ form.numero_rotulo.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia.help_text }}" ></i>
											{{ form.potencia.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_presente.help_text }}" ></i>
											{{ form.potencia_presente.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_fuera.help_text }}" ></i>
											{{ form.potencia_fuera.label_tag }}
										</th>
										<th></th>
										{% endif %}
										{% endfor %}
									</thead>
									<tbody>
										{% for form in form_agua %}
										<tr>
											<td>
												<div class="form-group">
													{{ form.nombre }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.numero_rotulo }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia_presente }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia_fuera }}
												</div>
											</td>
											<td class="text-center delete">
												<div class="form-group text-center">
													{{ form.DELETE }}
													<a class="btn btn-delete btn-bitbucket" onclick="open_modal_delete_child(this, 'Medidor')"><i class="fa fa-trash"></i></a>
												</div>
											</td>
										</tr>
										{% endfor %}
									</tbody>
								</table>
							</div>
						</div>
					</div>

					<div class="ibox-title">
						<h5>Medidores de Gas</h5>
					</div>

					<div class="ibox-content">
						<br>
						<div class="row">
							<div class="col-sm-12">

								{{ form_gas.management_form }}
								{% for form in form_gas %}
								{% for hidden in form.hidden_fields %}
								{{ hidden }}
								{% endfor %}
								{% endfor %}

								<button type="button" class="btn btn-primary btn-xs pull-right" onclick="agregar_fila('tabla-gas', 'medidor_')"><i class="fa fa-plus"></i> Medidor de Gas</button>
								<table id="tabla-gas" class="table">
									<thead>
										{% for form in form_gas %}
										{% if forloop.first %}
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.nombre.help_text }}" ></i>
											{{ form.nombre.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.numero_rotulo.help_text }}" ></i>
											{{ form.numero_rotulo.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia.help_text }}" ></i>
											{{ form.potencia.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_presente.help_text }}" ></i>
											{{ form.potencia_presente.label_tag }}
										</th>
										<th>
											<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.potencia_fuera.help_text }}" ></i>
											{{ form.potencia_fuera.label_tag }}
										</th>
										<th></th>
										{% endif %}
										{% endfor %}
									</thead>
									<tbody>
										{% for form in form_gas %}
										<tr>
											<td>
												<div class="form-group">
													{{ form.nombre }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.numero_rotulo }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia_presente }}
												</div>
											</td>
											<td>
												<div class="form-group">
													{{ form.potencia_fuera }}
												</div>
											</td>
											<td class="text-center delete">
												<div class="form-group text-center">
													{{ form.DELETE }}
													<a class="btn btn-delete btn-bitbucket" onclick="open_modal_delete_child(this, 'Medidor')"><i class="fa fa-trash"></i></a>
												</div>
											</td>
										</tr>
										{% endfor %}
									</tbody>
								</table>
							</div>
						</div>
						<br>
						<br>
						<a href="/activos/list"><button class="btn btn-w-m btn-sm btn-default" type="button">CANCELAR</button></a>
						<button class="btn btn-w-m btn-sm btn-primary pull-right" type="submit">GUARDAR Y SALIR</button>
						<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button" style="margin-right: 15px;" onclick="guardar_formulario('{{accion}}', 'form-medidor-new')">GUARDAR Y SEGUIR</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

{% endblock section %}

{% block scripts %}
<script>

var tabla_electricidad 	= []
var tabla_agua			= []
var tabla_gas			= []

$(document).ready(function(){

	var configuracion = {
		'order': false,
		'paginate': false,
		'bLengthChange': false,
		'bInfo': false,
		'searching':false,
		'buttons': [],
	}

	load_table_electricidad(configuracion)
	load_table_agua(configuracion)
	load_table_gas(configuracion)

});


function load_table_electricidad(configuracion){

	var columns = [
	{
		'width': '15%',
		'orderable': false,
		'data': 'nombre',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'numero_rotulo',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'potencia',
	},
	{
		'width': '20%',
		'orderable': false,
		'data': 'potencia_presente',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'potencia_fuera',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'tarifa',
	},
	{
		'width': '10%',
		'orderable': false,
		'data': 'eliminar',
	}];

	tabla_electricidad = load_table('#tabla-electricidad', columns, configuracion)
}

function load_table_agua(configuracion){

	var columns = [
	{
		'width': '15%',
		'orderable': false,
		'data': 'nombre',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'numero_rotulo',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'potencia',
	},
	{
		'width': '20%',
		'orderable': false,
		'data': 'potencia_presente',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'potencia_fuera',
	},
	{
		'width': '10%',
		'orderable': false,
		'data': 'eliminar',
	}];

	tabla_agua = load_table('#tabla-agua', columns, configuracion)
}

function load_table_gas(configuracion){

	var columns = [
	{
		'width': '15%',
		'orderable': false,
		'data': 'nombre',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'numero_rotulo',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'potencia',
	},
	{
		'width': '20%',
		'orderable': false,
		'data': 'potencia_presente',
	},
	{
		'width': '15%',
		'orderable': false,
		'data': 'potencia_fuera',
	},
	{
		'width': '10%',
		'orderable': false,
		'data': 'eliminar',
	}];

	tabla_gas = load_table('#tabla-gas', columns, configuracion)
}


</script>
{% endblock scripts %}

# contratos/urls.py

	url(r'^contratos/arriendo/$', views.ContratoArriendo.as_view(), name='contrato_arriendo'),
	url(r'^contratos/(?P<contrato_id>\d+)/arriendo/new$', views.ArriendoNew.as_view(), name='arriendo_new'),
	url(r'^contratos/(?P<contrato_id>\d+)/arriendo/update/(?P<arriendo_id>\d+)$', views.ArriendoUpdate.as_view(), name='arriendo_update'),
	url(r'^contratos/(?P<contrato_id>\d+)/informacion$', views.ArriendoPruebaNew.as_view(), name='arriendo_prueba_new'),

# viewer/templates/viewer/locales/local_list.html

select.push({'id':data[i].id, 'text':data[i].nombre})
select_config 	= {
	select 		: 's-activo',
	placeholder : 'Seleccionar Activo',
	data: select
}
format_select(select_config)
$('#url-new-local').attr('href', '/activos/'+$('#s-activo').val()+'/locales/new')

# contrato/forms.py

class ServicioBasicoForm(forms.ModelForm):

	def __init__(self, *args, **kwargs):

		contrato = kwargs.pop('contrato', None)
		super(ServicioBasicoForm, self).__init__(*args, **kwargs)

		if contrato is not None:
			self.fields['local'].queryset = contrato.locales.all()

	class Meta:
		model 	= Servicio_Basico
		fields 	= '__all__'
		exclude = ['visible', 'creado_en']

		widgets = {
			'tipo'			: forms.Select(attrs={'class': 'form-control tipo-asd'}),
			'local'			: forms.Select(attrs={'class': 'form-control'}),
			'mes_inicio'	: forms.Select(attrs={'class': 'form-control'}),
			'mes_termino'	: forms.Select(attrs={'class': 'form-control'}),
			'valor'			: forms.NumberInput(attrs={'class': 'form-control'}),
		}

		error_messages = {
			'tipo'			: {'required': 'campo requerido'},
			'mes_inicio'	: {'required': 'campo requerido'},
			'mes_termino'	: {'required': 'campo requerido'},
			'valor'			: {'required': 'campo requerido'},
		}

		labels = {
			'tipo'			: 'Tipo',
			'mes_inicio'	: 'Meses Inicio',
			'mes_termino'	: 'Mes Termino',
		}

		help_texts = {
			'tipo' 			: 'tipo',
			'mes_inicio' 	: 'mes inicio',
			'mes_termino' 	: 'mes termino',
			'valor' 		: 'valor',
		}

ServicioBasicoFormSet 	= inlineformset_factory(Contrato, Servicio_Basico, form=ServicioBasicoForm, extra=1, can_delete=True)

# procesos/views.py

def calculo_arriendo_minimo(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []

	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 1,
		proceso_estado_id 	= 1,
		)
	proceso.save()
	
	for x in range(meses):

		for item in contratos:

			total 		= 0
			contrato 	= Contrato.objects.get(id=item)

			try:
				arriendo = Arriendo.objects.get(contrato=contrato)
				detalles = Arriendo_Detalle.objects.filter(arriendo=arriendo)

				for detalle in detalles:
					if fecha.month >= int(detalle.mes_inicio) and fecha.month <= int(detalle.mes_termino):
						valor 	= detalle.valor
						moneda 	= detalle.moneda.id
						factor  = detalle.moneda.moneda_historial_set.all().order_by('-id').first().valor

						reajuste_valor 	= 1
						reajuste_moneda = 1
						reajuste_factor = 1
						reajuste 		= arriendo.reajuste
						metros 			= detalle.metro_cuadrado
						metros_valor 	= 1

						if arriendo.reajuste == True and fecha >= sumar_meses(arriendo.fecha_inicio, arriendo.meses):

							reajuste_valor 	= arriendo.valor
							reajuste_moneda = arriendo.moneda.id
							reajuste_factor = arriendo.moneda.moneda_historial_set.all().order_by('-id').first().valor

							if arriendo.moneda.id == 6:
								reajuste_valor = (reajuste_valor/100)+1
						
						if detalle.metro_cuadrado == True:
							locales =  contrato.locales.all()
							metros_valor = 0
							for local in locales:
								metros_valor += local.metros_cuadrados

					total = valor * factor * metros_valor * (reajuste_valor * reajuste_factor)

			except Arriendo.DoesNotExist:
				total = 0

			proceso_detalle = Proceso_Detalle(
				total 			= total,
				fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
				fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
				proceso 		= proceso,
				contrato 		= contrato,
			)
			proceso_detalle.save()
			
			data.append({
				'id'				: proceso.id,
				'fecha_inicio'		: primer_dia(fecha),
				'fecha_termino'		: ultimo_dia(fecha),
				'concepto'			: 'Arriendo Minimo',
				'contrato_numero'	: contrato.numero,
				'contrato_nombre'	: contrato.nombre_local,
				'valor'				: total,
			})

		fecha = sumar_meses(fecha, 1)

	return data

def calculo_arriendo_variable(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []


	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 2,
		proceso_estado_id 	= 1,
		)
	proceso.save()
	
	for x in range(meses):

		for item in contratos:

			total 		= 0
			contrato 	= Contrato.objects.get(id=item)

			try:
				detalles = Arriendo_Variable.objects.filter(contrato=contrato)

				for detalle in detalles:
					if fecha.month >= int(detalle.mes_inicio) and fecha.month <= int(detalle.mes_termino):

						venta_valor	= 0
						
						locales = contrato.locales.all()

						ventas 	= Venta.objects.filter(local_id__in=locales).\
						extra(select={'year': "EXTRACT(year FROM fecha_inicio)",'month': "EXTRACT(month FROM fecha_inicio)", 'id': "id"}).\
						values('year', 'month', 'local_id').\
						annotate(Sum('valor'))

						for venta in ventas:
							if fecha.month == venta['month'] and fecha.year == venta['year']:
								venta_valor += venta['valor__sum']

						valor = (detalle.valor / 100) + 1

						reajuste_valor 	= 1
						reajuste_moneda = 1
						reajuste_factor = 1

						metros_valor 	= 1

					else:
						venta_valor	= 0
						valor 	= 0

						reajuste_valor 	= 0
						reajuste_moneda = 0
						reajuste_factor = 0
						metros_valor 	= 0

					total = venta_valor * valor

			except Arriendo_Variable.DoesNotExist:
				total 			= 0

			proceso_detalle = Proceso_Detalle(
				total 			= total,
				fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
				fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
				proceso 		= proceso,
				contrato 		= contrato,
			)
			proceso_detalle.save()
			
			data.append({
				'id'				: proceso.id,
				'fecha_inicio'		: primer_dia(fecha),
				'fecha_termino'		: ultimo_dia(fecha),
				'concepto'			: 'Arriendo Variable',
				'contrato_numero'	: contrato.numero,
				'contrato_nombre'	: contrato.nombre_local,
				'valor'				: total,
			})

		fecha = sumar_meses(fecha, 1)

	return data

# viewer/templates/viewer/procesos_list.html

<select name="concepto" class="form-control" onchange="mostrar_values_servicios()">

<div class="row info-servicios-basicos hide">

	<div class="form-group col-sm-2">
		<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="" data-original-title="..."></i>
		<label for="valor_luz">Valor Electricidad:</label>
		<input class="form-control" id="valor_luz" name="valor_luz" type="number">
		<div class="container-error"></div>
	</div>
	<div class="form-group col-sm-2">
		<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="" data-original-title="..."></i>
		<label for="valor_agua">Valor Agua:</label>
		<input class="form-control" id="valor_agua" name="valor_agua" type="number">
		<div class="container-error"></div>
	</div>
	<div class="form-group col-sm-2">
		<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="" data-original-title="..."></i>
		<label for="valor_gas">Valor Gas:</label>
		<input class="form-control" id="valor_gas" name="valor_gas" type="number">
		<div class="container-error"></div>
	</div>
</div>


<input type="hidden" name="valor_luz">
<input type="hidden" name="valor_agua">
<input type="hidden" name="valor_gas">

function mostrar_values_servicios(){
	concepto 	= parseInt($('#form-fitrar-contratos select[name="concepto"]').val())
	if (concepto == 4) {
		$('.info-servicios-basicos').removeClass('hide')
	}else{
		$('.info-servicios-basicos').addClass('hide')
	}
}

# proceso/views.py

var_post 		= request.POST.copy()
contratos 		= var_post.get('contratos').split(",")
fecha_inicio 	= var_post.get('fecha_inicio')
fecha_termino 	= var_post.get('fecha_termino')
concepto 		= var_post.get('concepto')

if int(concepto) == 1:
	data = calculo_arriendo_minimo(request, fecha_inicio, fecha_termino, contratos)
elif int(concepto) == 2:
	data = calculo_arriendo_variable(request, fecha_inicio, fecha_termino, contratos)
elif int(concepto) == 3:
	data = calculo_gasto_comun(request, fecha_inicio, fecha_termino, contratos)
elif int(concepto) == 4:
	data = calculo_servicios_basico(request, fecha_inicio, fecha_termino, contratos)
elif int(concepto) == 5:
	data = calculo_cuota_incorporacion(request, fecha_inicio, fecha_termino, contratos)
elif int(concepto) == 6:
	data = calculo_fondo_promocion(request, fecha_inicio, fecha_termino, contratos)
else:
	data = []

return JsonResponse(data, safe=False)


def calculo_arriendo_minimo(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []

	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 1,
		proceso_estado_id 	= 1,
		)
	proceso.save()
	
	for x in range(meses):

		for item in contratos:

			contrato 		= Contrato.objects.get(id=item)
			locales 		= contrato.locales.all()
			metros_total 	= contrato.locales.all().aggregate(Sum('metros_cuadrados'))

			try:
				arriendo 	= Arriendo.objects.get(contrato=contrato)
				existe 		= Arriendo_Detalle.objects.filter(arriendo=arriendo, mes_inicio__lte=fecha.month, mes_termino__gte=fecha.month).exists()

				if existe is True:
					detalle = Arriendo_Detalle.objects.filter(arriendo=arriendo, mes_inicio__lte=fecha.month, mes_termino__gte=fecha.month)

					metro_cuadrado	= detalle[0].metro_cuadrado
					
					if metro_cuadrado is True:
						factor 			= detalle[0].moneda.moneda_historial_set.all().order_by('-id').first().valor
						metros 			= metros_total['metros_cuadrados__sum']
						metros_local 	= metros_total['metros_cuadrados__sum']
					else:
						factor 			= detalle[0].moneda.moneda_historial_set.all().order_by('-id').first().valor
						metros 			= 1
						metros_local 	=  None

					valor = detalle[0].valor * factor * metros

					if arriendo.reajuste is True and fecha >= sumar_meses(arriendo.fecha_inicio, arriendo.meses):
						reajuste = True

						if arriendo.moneda.id == 6:
							reajuste_valor = (arriendo.valor/100)+1
						else:
							reajuste_valor = arriendo.valor * arriendo.moneda.moneda_historial_set.all().order_by('-id').first().valor

						total = valor * reajuste_valor

					else:
						reajuste 		= False
						reajuste_valor 	= None
						total 			= valor

				else:
					valor			= None
					metro_cuadrado	= False
					metros_local    = None
					reajuste		= False
					reajuste_valor	= None
					total 			= None

			except Arriendo.DoesNotExist:
				valor			= None
				metro_cuadrado	= False
				metros_local    = None
				reajuste		= False
				reajuste_valor	= None
				total 			= None


			proceso_detalle = Detalle_Arriendo_Minimo(
				valor			= valor,
				metro_cuadrado	= metro_cuadrado,
				metros_local	= metros_local,
				reajuste		= reajuste,
				reajuste_valor	= reajuste_valor,
				total 			= total,
				fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
				fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
				proceso 		= proceso,
				contrato 		= contrato,
			).save()
			
			data.append({'id':proceso.id})

		fecha = sumar_meses(fecha, 1)

	return data

def calculo_arriendo_variable(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []


	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 2,
		proceso_estado_id 	= 1,
		)
	proceso.save()
	
	for x in range(meses):

		for item in contratos:

			contrato 		= Contrato.objects.get(id=item)
			locales 		= contrato.locales.all()

			# cálculo arriendo mínimo
			metros_total 	= contrato.locales.all().aggregate(Sum('metros_cuadrados'))

			try:
				arriendo 	= Arriendo.objects.get(contrato=contrato)
				existe 		= Arriendo_Detalle.objects.filter(arriendo=arriendo, mes_inicio__lte=fecha.month, mes_termino__gte=fecha.month).exists()

				if existe is True:
					detalle = Arriendo_Detalle.objects.filter(arriendo=arriendo, mes_inicio__lte=fecha.month, mes_termino__gte=fecha.month)

					metro_cuadrado	= detalle[0].metro_cuadrado
					
					if metro_cuadrado is True:
						factor = detalle[0].moneda.moneda_historial_set.all().order_by('-id').first().valor
						metros = metros_total['metros_cuadrados__sum']
					else:
						factor = detalle[0].moneda.moneda_historial_set.all().order_by('-id').first().valor
						metros = 1

					valor_arriendo_minimo = detalle[0].valor * factor * metros

					if arriendo.reajuste is True and fecha >= sumar_meses(arriendo.fecha_inicio, arriendo.meses):

						if arriendo.moneda.id == 6:
							reajuste_valor = (arriendo.valor/100)+1
						else:
							reajuste_valor = arriendo.valor * arriendo.moneda.moneda_historial_set.all().order_by('-id').first().valor

						arriendo_minimo = valor_arriendo_minimo * reajuste_valor

					else:
						
						arriendo_minimo = valor_arriendo_minimo

				else:
					arriendo_minimo = None

			except Arriendo.DoesNotExist:
				arriendo_minimo = None

			

			try:
				existe = Arriendo_Variable.objects.filter(contrato=contrato, mes_inicio__lte=fecha.month, mes_termino__gte=fecha.month).exists()
				if existe is True:
					detalle 		= Arriendo_Variable.objects.filter(contrato=contrato, mes_inicio__lte=fecha.month, mes_termino__gte=fecha.month)	
					valor 			= detalle[0].valor
					ventas 			= 0
					ventas_local 	= Venta.objects.filter(local_id__in=locales).\
					extra(select={'year': "EXTRACT(year FROM fecha_inicio)",'month': "EXTRACT(month FROM fecha_inicio)", 'id': "id"}).\
					values('year', 'month', 'local_id').\
					annotate(Sum('valor'))

					for venta in ventas_local:
						if fecha.month == venta['month'] and fecha.year == venta['year']:
							ventas += venta['valor__sum']

					

					if ((ventas * valor) / 100) >= arriendo_minimo:
						
						total = ((ventas * valor) / 100) - arriendo_minimo
					else:
						
						total = 0

				else:

					valor 			= None
					ventas 			= None
					# arriendo_minimo = None
					total 			= None

			except Exception:

				valor 			= None
				ventas 			= None
				# arriendo_minimo = None
				total 			= None


			proceso_detalle = Detalle_Arriendo_Variable(
				valor 			= valor,
				ventas 			= ventas,
				arriendo_minimo = arriendo_minimo,
				total 			= total,
				fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
				fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
				proceso 		= proceso,
				contrato 		= contrato,
			).save()
			
			data.append({'id':proceso.id})

		fecha = sumar_meses(fecha, 1)

	return data

def calculo_gasto_comun(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []


	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 3,
		proceso_estado_id 	= 1,
		)
	proceso.save()
	
	for x in range(meses):
		for item in contratos:

			contrato 		= Contrato.objects.get(id=item)
			locales 		= contrato.locales.all()
						
			activos 		= contrato.locales.all().values_list('activo_id', flat=True)
			# metros_total 	= contrato.locales.all().aggregate(Sum('metros_cuadrados'))
			metros_total   	= Local.objects.filter(activo__in=activos).aggregate(Sum('metros_cuadrados'))

			for local in locales:

				if Gasto_Comun.objects.filter(contrato=contrato, local=local).exists():
					gasto_comun = Gasto_Comun.objects.filter(contrato=contrato, local=local)
					if gasto_comun[0].prorrateo == True:
						valor 		= None
						prorrateo 	= True
						try:
							gasto_mensual 	= Gasto_Mensual.objects.get(activo=local.activo, mes=fecha.month, anio=fecha.year).valor
							total 		 	= (local.metros_cuadrados * gasto_mensual) / metros_total['metros_cuadrados__sum']
						except Exception:
							gasto_mensual	= None
							total 			= None
					else:
						factor 			= gasto_comun[0].moneda.moneda_historial_set.all().order_by('-id').first().valor

						valor 			= gasto_comun[0].valor
						gasto_mensual 	= None
						prorrateo 		= False
						total 			= valor * factor
				else:
					valor 			= None
					gasto_mensual 	= None
					prorrateo 		= False
					total 			= None

				
				# try:
				# 	gasto_comun = Gasto_Comun.objects.get(contrato=contrato, local=local)
				# 	if gasto_comun.prorrateo == True:
				# 		valor 		= None
				# 		prorrateo 	= True
				# 		try:
				# 			gasto_mensual 	= Gasto_Mensual.objects.get(activo=local.activo, mes=fecha.month, anio=fecha.year).valor
				# 			total 		 	= (local.metros_cuadrados * gasto_mensual) / metros_total['metros_cuadrados__sum']
				# 		except Exception:
				# 			gasto_mensual	= None
				# 			total 			= None
				# 	else:
				# 		factor 			= gasto_comun.moneda.moneda_historial_set.all().order_by('-id').first().valor

				# 		valor 			= gasto_comun.valor
				# 		gasto_mensual 	= None
				# 		prorrateo 		= False
				# 		total 			= valor * factor

				# except Gasto_Comun.DoesNotExist:
				# 	valor 			= None
				# 	gasto_mensual 	= None
				# 	prorrateo 		= False
				# 	total 			= None

				Detalle_Gasto_Comun(
					valor 			= valor,
					prorrateo		= prorrateo,
					gasto_mensual 	= gasto_mensual,
					metros_total 	= metros_total['metros_cuadrados__sum'],
					total 			= total, 
					fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
					fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
					proceso 		= proceso,
					contrato 		= contrato,
					local 			= local,
				).save()
			
			data.append({'id':proceso.id})

		fecha = sumar_meses(fecha, 1)

	return data

def calculo_servicios_basico(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []

	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 4,
		proceso_estado_id 	= 1,
		)
	proceso.save()
	
	for x in range(meses):

		for item in contratos:
			
			contrato 		= Contrato.objects.get(id=item)
			locales 		= contrato.locales.values_list('id', flat=True).all()	
			medidores_luz  	= Medidor_Electricidad.objects.filter(local__in=locales)
			medidores_agua  = Medidor_Agua.objects.filter(local__in=locales)
			medidores_gas  	= Medidor_Gas.objects.filter(local__in=locales)


			for medidor in medidores_luz:
				try:
					valor_anterior 	= Lectura_Electricidad.objects.get(medidor_electricidad=medidor, mes=(fecha.month-1), anio=fecha.year).valor
				except Exception:
					valor_anterior	= None
				try:
					valor_actual 	= Lectura_Electricidad.objects.get(medidor_electricidad=medidor, mes=fecha.month, anio=fecha.year).valor
				except Exception:
					valor_actual	= None
				try:
					if medidor.local.servicio_basico_set.all().exists():
						servicios_basicos = medidor.local.servicio_basico_set.all()
						valor_luz = servicios_basicos[0].valor_electricidad
					else:
						valor_luz	= None
				except Exception:
					valor_luz	= None

				Detalle_Electricidad(
					valor			= valor_luz,
					valor_anterior	= valor_anterior,
					valor_actual	= valor_actual,
					fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
					fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
					proceso			= proceso,
					contrato		= contrato,
					medidor			= medidor,
				).save()

			for medidor in medidores_agua:
				try:
					lectura_anterior 	= Lectura_Agua.objects.get(medidor_electricidad=medidor, mes=(fecha.month-1), anio=fecha.year)
				except Exception as error:
					lectura_anterior	= None
				try:
					lectura_actual 		= Lectura_Agua.objects.get(medidor_electricidad=medidor, mes=fecha.month, anio=fecha.year)
				except Exception as error:
					lectura_actual		= None
				try:
					if medidor.local.servicio_basico_set.all().exists():
						servicios_basicos = medidor.local.servicio_basico_set.all()
						valor_agua = servicios_basicos[0].valor_agua
					else:
						valor_agua	= None
				except Exception:
					valor_agua	= None

				Detalle_Agua(
					valor			= valor_agua,
					valor_anterior	= lectura_anterior,
					valor_actual	= lectura_actual,
					fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
					fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
					proceso			= proceso,
					contrato		= contrato,
					medidor			= medidor,
				).save()

			for medidor in medidores_gas:
				try:
					lectura_anterior 	= Lectura_Gas.objects.get(medidor_electricidad=medidor, mes=(fecha.month-1), anio=fecha.year)
				except Exception as error:
					lectura_anterior	= None
				try:
					lectura_actual 		= Lectura_Gas.objects.get(medidor_electricidad=medidor, mes=fecha.month, anio=fecha.year)
				except Exception as error:
					lectura_actual		= None
				try:
					if medidor.local.servicio_basico_set.all().exists():
						servicios_basicos = medidor.local.servicio_basico_set.all()
						valor_gas = servicios_basicos[0].valor_gas
					else:
						valor_gas	= None
				except Exception:
					valor_gas	= None

				Detalle_Gas(
					valor			= valor_gas,
					valor_anterior	= lectura_actual,
					valor_actual	= lectura_actual,
					fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
					fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
					proceso			= proceso,
					contrato		= contrato,
					medidor			= medidor,
				).save()

			data.append({'id':proceso.id})

		fecha = sumar_meses(fecha, 1)

	return data

def calculo_cuota_incorporacion(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []

	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 5,
		proceso_estado_id 	= 1,
		)
	proceso.save()
	
	for x in range(meses):
		for item in contratos:

			contrato = Contrato.objects.get(id=item)
			
			try:
				existe = Cuota_Incorporacion.objects.filter(contrato=contrato, fecha__year=fecha.year, fecha__month=fecha.month).exists()

				if existe is True:
					cuota_incorporacion = Cuota_Incorporacion.objects.filter(contrato=contrato, fecha__year=fecha.year, fecha__month=fecha.month)
					valor 				= cuota_incorporacion[0].valor
					factor 				= cuota_incorporacion[0].moneda.moneda_historial_set.all().order_by('-id').first().valor
					total 				= valor * factor
				else:
					valor 	= None
					factor 	= None
					total 	= None


			except Cuota_Incorporacion.DoesNotExist:
				valor 			= None
				factor 			= None
				total 			= None

			Detalle_Cuota_Incorporacion(
				valor 			= valor,
				factor 			= factor,
				total 			= total,
				fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
				fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
				proceso 		= proceso,
				contrato 		= contrato,
			).save()

			data.append({'id':proceso.id})

		fecha = sumar_meses(fecha, 1)

	return data

def calculo_fondo_promocion(request, fecha_inicio, fecha_termino, contratos):

	user 		= User.objects.get(pk=request.user.pk)
	contratos 	= contratos
	f_inicio 	= primer_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	f_termino 	= ultimo_dia(datetime.strptime(fecha_termino, "%d/%m/%Y"))
	fecha 		= ultimo_dia(datetime.strptime(fecha_inicio, "%d/%m/%Y"))
	meses		= meses_entre_fechas(f_inicio, f_termino)
	data 		= []

	proceso = Proceso(
		fecha_inicio		= f_inicio.strftime('%Y-%m-%d'),
		fecha_termino		= f_termino.strftime('%Y-%m-%d'),
		user				= user,
		concepto_id			= 6,
		proceso_estado_id 	= 1,
		)
	proceso.save()

	for x in range(meses):
		for item in contratos:

			contrato = Contrato.objects.get(id=item)
			
			try:
				fondo_promocion = Fondo_Promocion.objects.get(contrato=contrato)

				if fondo_promocion.periodicidad == 0:

					try:
						mes_1 = sumar_meses(fondo_promocion.fecha, 11)

						if fecha.month == mes_1.month:
							fondo 	= Fondo_Promocion.objects.get(contrato=contrato)
							valor 	= fondo.valor
							factor 	= fondo.moneda.moneda_historial_set.all().order_by('-id').first().valor
							total 	= valor * factor
						else:
							valor 	= None
							factor 	= None
							total 	= None
						
					except Exception:
						valor 	= None
						factor 	= None
						total 	= None

				elif fondo_promocion.periodicidad == 1:

					mes_1 = sumar_meses(fondo_promocion.fecha, 5)
					mes_2 = sumar_meses(fondo_promocion.fecha, 11)

					try:
						if fecha.month == mes_1.month or fecha.month==mes_2.month:

							fondo 	= Fondo_Promocion.objects.get(contrato=contrato)
							valor 	= fondo.valor
							factor 	= fondo.moneda.moneda_historial_set.all().order_by('-id').first().valor
							total 	= valor * factor
						else:
							valor 	= None
							factor 	= None
							total 	= None
						
					except Exception:
						valor 	= None
						factor 	= None
						total 	= None
					
				elif fondo_promocion.periodicidad == 2:

					mes_1 = sumar_meses(fondo_promocion.fecha, 3)
					mes_2 = sumar_meses(fondo_promocion.fecha, 7)
					mes_3 = sumar_meses(fondo_promocion.fecha, 11)

					try:
						if fecha.month == mes_1.month or fecha.month==mes_2.month or fecha.month==mes_3.month:
							fondo 	= Fondo_Promocion.objects.get(contrato=contrato)
							valor 	= fondo.valor
							factor 	= fondo.moneda.moneda_historial_set.all().order_by('-id').first().valor
							total 	= valor * factor
						else:
							valor 	= None
							factor 	= None
							total 	= None
					except Exception:
						valor 	= None
						factor 	= None
						total 	= None

				elif fondo_promocion.periodicidad == 3:
					valor 	= fondo_promocion.valor
					factor 	= fondo_promocion.moneda.moneda_historial_set.all().order_by('-id').first().valor
					total 	= valor * factor
				else:
					valor 			= None
					factor 			= None
					total 			= None

			except Fondo_Promocion.DoesNotExist:
				valor 			= None
				factor 			= None
				total 			= None

			Detalle_Fondo_Promocion(
				valor 			= valor,
				factor 			= factor,
				total 			= total,
				fecha_inicio	= primer_dia(fecha).strftime('%Y-%m-%d'),
				fecha_termino	= ultimo_dia(fecha).strftime('%Y-%m-%d'),
				proceso 		= proceso,
				contrato 		= contrato,
			).save()

			data.append({'id':proceso.id})

		fecha = sumar_meses(fecha, 1)

	return data



def propuesta_pdf(proceso, pk=None):


	if pk is not None:
		proceso = Proceso.objects.get(id=pk)

	options = {
		# 'orientation': 'Landscape',
		'margin-top': '0.5in',
		'margin-right': '0.2in',
		'margin-left': '0.2in',
		'margin-bottom': '0.5in',
		'encoding': "UTF-8",
		}

	css = 'static/assets/css/bootstrap.min.css'

	if proceso.concepto_id == 1:
		data    	= data_arriendo_minimo(proceso)
		template 	= get_template('pdf/procesos/propuesta_arriendo_minimo.html')

	elif proceso.concepto_id == 2:
		data    	= data_arriendo_variable(proceso)
		template 	= get_template('pdf/procesos/propuesta_arriendo_variable.html')

	elif proceso.concepto_id == 3:
		data 		= data_gastos_comunes(proceso)
		template 	= get_template('pdf/procesos/propuesta_gastos_comunes.html')

	elif proceso.concepto_id == 4:
		data 		= data_servicios_basicos(proceso)
		template 	= get_template('pdf/procesos/propuesta_servicios_basicos.html')

	elif proceso.concepto_id == 5:
		data 		= data_cuota_incorporacion(proceso)
		template 	= get_template('pdf/procesos/propuesta_cuota_incorporacion.html')

	elif proceso.concepto_id == 6:
		data 		= data_fondo_promocion(proceso)
		template 	= get_template('pdf/procesos/propuesta_fondo_promocion.html')

	else:
		

	context = Context({
		'proceso' 	: proceso,
		'detalle' 	: data['detalle'],
		'total'		: data['total'],
	})

	html 		= template.render(context)
	pdfkit.from_string(html, 'public/media/contratos/propuesta_facturacion.pdf', options=options, css=css)
	pdf 		= open('public/media/contratos/propuesta_facturacion.pdf', 'rb')
	response 	= HttpResponse(pdf.read(), content_type='application/pdf')
	response['Content-Disposition'] = 'attachment; filename=propuesta_facturacion.pdf'
	pdf.close()

	return response

// 

	// var mensaje = 'campo requerido'

	// $.validator.addMethod("field_required_arriendo_minimo", function (value, element) {
	// 	console.log('field_required_arriendo_minimo')
	// 	var response = true
	// 	if ($('input[name=arriendo_minimo]').prop('checked'))
	// 		response = false
	// 	return response
	// }, mensaje);

	// $.validator.addMethod("field_required_arriendo_variable", function (value, element) {
	// 	console.log('field_required_arriendo_variable')
	// 	var response = true
	// 	// if ($('input[name=arriendo_variable]').prop('checked')){
	// 	// 	if ($("input[name=arriendo_variable-valor].field-required").val() != "" && $("select[name=arriendo_variable-moneda].field-required").val() != ""){
	// 	// 		response = true
	// 	// 	}else{
	// 	// 		response = false
	// 	// 	}
	// 	// }

	// 	if ($("input[name=arriendo_variable-valor].field-required").val() != "")
	// 		response = false
	// 	console.log(response)
	// 	return response
	// }, mensaje);

	// $.validator.addMethod("field_required_arriendo_bodega", function (value, element) {
	// 	console.log('field_required_arriendo_bodega')
	// 	var response = true
	// 	if ($('input[name=arriendo_bodega]').prop('checked'))
	// 		response = false
	// 	return response
	// }, mensaje);

	// $.validator.addMethod("field_required_cuota_incorporacion", function (value, element) {
	// 	console.log('field_required_cuota_incorporacion')
	// 	var response = true
	// 	if ($('input[name=cuota_incorporacion]').prop('checked'))
	// 		response = false
	// 	return response
	// }, mensaje);

	// $.validator.addMethod("field_required_fondo_promocion", function (value, element) {
	// 	console.log('field_required_fondo_promocion')
	// 	var response = true
	// 	if ($('input[name=fondo_promocion]').prop('checked'))
	// 		response = false
	// 	return response
	// }, mensaje);

	// $.validator.addMethod("field_required_gasto_comun", function (value, element) {
	// 	console.log('field_required_gasto_comun')
	// 	var response = true
	// 	if ($('input[name=gasto_comun]').prop('checked'))
	// 		response = false
	// 	return response
	// }, mensaje);


//Method DELETE AJAX

{#    $.ajax({#}
{#        type: "delete",#}
{#        url: '{% url 'venta_list' %}',#}
{#        dataType: 'json',#}
{#        beforeSend: function(xhr) {#}
{#            xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));#}
{#        },#}
{#        success: function(response) {#}
{#			if (response.estado == true ) {#}
{#				var configuracion = {#}
{#					'toast_type'	: 'success',#}
{#					'toast_text' 	: 'Guardado correctamente',#}
{#					'toast_title' 	: 'ÉXITO',#}
{#				}#}
{#			}else{#}
{#				var configuracion = {#}
{#					'toast_type'	: 'error',#}
{#					'toast_text' 	: 'No se pudo actualizar',#}
{#					'toast_title' 	: 'Error',#}
{#				}#}
{#			}#}
{#            notification_toast(configuracion)#}
{#            load_tabla_ventas()#}
{#        }#}
{#    });#}


// formulario concepto arriendo minimo con reajuste incluido
<div class="panel panel-default">

	<div class="panel-heading" role="tab" id="heading-{{forloop.counter}}">
		<h4 class="panel-title">
			<a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapse-{{forloop.counter}}" aria-controls="collapse-{{forloop.counter}}" aria-expanded="false">
				{{formulario.concepto.nombre}}
			</a>
		</h4>
	</div>

	<div id="collapse-{{forloop.counter}}" class="panel-collapse collapse" role="tabpanel" aria-labelledby="heading-{{forloop.counter}}">
		<div class="panel-body">
			<form id="form-conceptos-{{forloop.counter}}" role="form" action="" method="post">
				<input type="hidden" name="concepto_id" value="{{formulario.concepto.id}}">
				
				{% csrf_token %}

				<div id="container-concepto-{{forloop.counter}}" class="row">
					<div class="col-sm-12">

						{{ formulario.fomulario_detalle.management_form }}
						{% for form in formulario.fomulario_detalle %}
						{% for hidden in form.hidden_fields %}
						{{ hidden }}
						{% endfor %}
						{% endfor %}

						<button type="button" class="btn btn-primary btn-xs pull-right" onclick="agregar_fila('tabla-arriendo-detalle-{{forloop.counter}}', 'arriendo_detalle')"><i class="fa fa-plus"></i> Nuevo Periodo</button>
						<table id="tabla-arriendo-detalle-{{forloop.counter}}" class="table">
							<thead>
								{% for form in formulario.fomulario_detalle %}
								{% if forloop.first %}
								<th>
									<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.mes_inicio.help_text }}" ></i>
									{{ form.mes_inicio.label_tag }}
								</th>
								<th>
									<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.mes_termino.help_text }}" ></i>
									{{ form.mes_termino.label_tag }}
								</th>
								<th>
									<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.valor.help_text }}" ></i>
									{{ form.valor.label_tag }}
								</th>
								<th>
									<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.moneda.help_text }}" ></i>
									{{ form.moneda.label_tag }}
								</th>
								<th>
									<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ form.metro_cuadrado.help_text }}" ></i>
									{{ form.metro_cuadrado.label_tag }}
								</th>

								<th></th>
								{% endif %}
								{% endfor %}
							</thead>
							<tbody>
								{% for form in formulario.fomulario_detalle %}
								<tr>
									<td>
										<div class="form-group">
											{{ form.mes_inicio }}
											<div class="container-error">
												{{ form.mes_inicio.errors }}
											</div>
										</div>
									</td>
									<td>
										<div class="form-group">
											{{ form.mes_termino }}
											<div class="container-error">
												{{ form.mes_termino.errors }}
											</div>
										</div>
									</td>
									<td>
										<div class="form-group">
											{{ form.valor }}
											<div class="container-error">
												{{ form.valor.errors }}
											</div>
										</div>
									</td>
									<td>
										<div class="form-group">
											{{ form.moneda }}
											<div class="container-error">
												{{ form.moneda.errors }}
											</div>
										</div>
									</td>
									<td class="text-center">
										<div class="form-group">
											{{ form.metro_cuadrado }}
											<div class="container-error">
												{{ form.metro_cuadrado.errors }}
											</div>
										</div>
									</td>
									<td class="text-center delete">

										<div class="form-group text-center">
											{{ form.DELETE }}
											<a class="btn btn-delete btn-bitbucket" onclick="open_modal_delete_child(this, 'Periodo')"><i class="fa fa-trash"></i></a>
										</div>
									</td>
								</tr>
								{% endfor %}
							</tbody>
						</table>

						<div class="row">

							<input type="hidden" id="id_contrato" name="contrato" value="{{contrato_id}}">

							<div class="form-group col-sm-2">
								<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ formulario.fomulario.reajuste.help_text }}" ></i>
								{{ formulario.fomulario.reajuste.label_tag }}
								{{ formulario.fomulario.reajuste }}
								<div class="container-error">
									{{ formulario.fomulario.reajuste.errors }}
								</div>
							</div>

							<div class="form-group col-sm-2">
								<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ formulario.fomulario.por_meses.help_text }}" ></i>
								{{ formulario.fomulario.por_meses.label_tag }}
								{{ formulario.fomulario.por_meses }}
								<div class="container-error">
									{{ formulario.fomulario.por_meses.errors }}
								</div>
							</div>

							<div class="form-group col-sm-2">
								<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ formulario.fomulario.meses.help_text }}" ></i>
								{{ formulario.fomulario.meses.label_tag }}
								{{ formulario.fomulario.meses }}
								<div class="container-error">
									{{ formulario.fomulario.meses.errors }}
								</div>
							</div>

							<div class="form-group col-sm-2">
								<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ formulario.fomulario.valor.help_text }}" ></i>
								{{ formulario.fomulario.valor.label_tag }}
								{{ formulario.fomulario.valor }}
								<div class="container-error">
									{{ formulario.fomulario.valor.errors }}
								</div>
							</div>

							<div class="form-group col-sm-2">
								<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ formulario.fomulario.moneda.help_text }}" ></i>
								{{ formulario.fomulario.moneda.label_tag }}
								{{ formulario.fomulario.moneda }}
								<div class="container-error">
									{{ formulario.fomulario.moneda.errors }}
								</div>
							</div>

							<div class="form-group col-sm-2">
								<i class="fa fa-question-circle info-label" data-toggle="tooltip" data-placement="top" title="{{ formulario.fomulario.fecha_inicio.help_text }}" ></i>
								{{ formulario.fomulario.fecha_inicio.label_tag }}
								<div class="input-group date">
									{{ formulario.fomulario.fecha_inicio }}
									<span class="input-group-addon">
										<i class="fa fa-calendar"></i>
									</span>
								</div>

								<div class="container-error">
									{{ formulario.fomulario.fecha_inicio.errors }}
								</div>
							</div>
						</div>
					</div>
				</div>
			</form>
			<br>
			<a href="/contratos/list"><button class="btn btn-w-m btn-sm btn-default" type="button">CANCELAR</button></a>
			<button class="btn btn-w-m btn-sm btn-primary pull-right" type="button" style="margin-right: 15px;" onclick="guardar_formulario_conceptos('form-conceptos-{{forloop.counter}}', '{{contrato_id}}', 'arriendo_detalle')">GUARDAR Y SEGUIR</button>
		</div>
	</div>
</div>

// contrato/views (forma antigua)
# if Arriendo.objects.filter(contrato=contrato, concepto=concepto).exists():
# 	arriendo_minimo 				= Arriendo.objects.get(contrato=contrato, concepto=concepto)
# 	context['formulario'] 			= ArriendoForm(self.request.POST, instance=arriendo_minimo)
# 	context['formulario_detalle'] 	= ArriendoDetalleFormSet(self.request.POST, instance=arriendo_minimo)
# else:
# 	context['formulario'] 			= ArriendoForm(self.request.POST)
# 	context['formulario_detalle'] 	= ArriendoDetalleFormSet(self.request.POST)


# class ArriendoForm(forms.ModelForm):

# 	valor 			= NumberField(widget=forms.TextInput(attrs={'class': 'form-control format-number'}), help_text='Valor de Reajuste')
# 	moneda 			= forms.ModelChoiceField(queryset = Moneda.objects.filter(id__in=[2,3,4,6]), initial='6',widget=forms.Select(attrs={'class': 'form-control moneda', 'data-table': 'false', 'onchange': 'cambio_format_moneda(this)'}), help_text='Tipo de Moneda del Reajuste')
# 	fecha_inicio 	= forms.DateField(input_formats=['%d/%m/%Y'],widget=forms.TextInput(attrs={'class': 'form-control format-date'}), help_text='Fecha Inicio de Aplicación del Reajuste')
# 	def __init__(self, *args, **kwargs):
# 		contrato = kwargs.pop('contrato', None)
# 		super(ArriendoForm, self).__init__(*args, **kwargs)
# 		if contrato is not None:
# 			self.fields['fecha_inicio'].initial = contrato.fecha_inicio.strftime('%d/%m/%Y')
# 	class Meta:
# 		model 	= Arriendo
# 		fields 	= '__all__'
# 		exclude = ['visible', 'concepto']
# 		widgets = {
# 			'reajuste'		: forms.CheckboxInput(attrs={'class': 'form-control'}),
# 			'por_meses'		: forms.CheckboxInput(attrs={'class': 'form-control'}),
# 			'meses'			: forms.NumberInput(attrs={'class': 'form-control'}),
# 			'fecha_inicio'	: forms.TextInput(attrs={'class': 'form-control'}),
# 		}
# 		error_messages = {
# 			'meses'			: {'required': 'campo requerido'},
# 			'moneda'		: {'required': 'campo requerido'},
# 			'fecha_inicio'	: {'required': 'campo requerido'},
# 		}

# 		labels = {
# 			'meses'			: 'Meses',
# 			'por_meses' 	: 'Por Meses',
# 			'fecha_inicio'	: 'Fecha Inicio',
# 		}

# 		help_texts = {
# 			'reajuste' 		: 'Aplica Reajuste',
# 			'por_meses'		: 'Reajuste Por Meses',
# 			'meses' 		: 'Cada Cuantos Meses Aplica Reajuste',
# 			'moneda' 		: 'Tipo de Moneda del Reajuste',
# 			'fecha_inicio' 	: 'Fecha Inicio de Aplicación del Reajuste',
# 		}